<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.mbtix.balgame.mapper.BalGameMapper">

  <!-- =========================
       ResultMaps (DTO constructor mapping)
       ========================= -->

  <!-- BalGameDtos.GameDto(Long gameId, String title, String startAt, String isActive) -->
  <resultMap id="GameDtoMap" type="com.kh.mbtix.balgame.model.dto.BalGameDtos$GameDto">
    <constructor>
      <arg column="GAME_ID"   javaType="long"/>
      <arg column="TITLE"     javaType="string"/>
      <arg column="START_AT"  javaType="string"/>
      <arg column="IS_ACTIVE" javaType="string"/>
    </constructor>
  </resultMap>

  <!-- BalGameDtos.OptionDto(Long optionId, Long gameId, String label, String textContent) -->
  <resultMap id="OptionDtoMap" type="com.kh.mbtix.balgame.model.dto.BalGameDtos$OptionDto">
    <constructor>
      <arg column="OPTION_ID"    javaType="long"/>
      <arg column="GAME_ID"      javaType="long"/>
      <arg column="LABEL"        javaType="string"/>
      <arg column="TEXT_CONTENT" javaType="string"/>
     
    </constructor>
  </resultMap>

  <!-- BalGameDtos.PastListRes.PastCard(Long gameId, String title, String startAt) -->
  <resultMap id="PastCardMap" type="com.kh.mbtix.balgame.model.dto.BalGameDtos$PastListRes$PastCard">
    <constructor>
      <arg column="GAME_ID"  javaType="long"/>
      <arg column="TITLE"    javaType="string"/>
      <arg column="START_AT" javaType="string"/>
    </constructor>
  </resultMap>
  

  <!-- =========================
       SELECTs
       ========================= -->

  <!-- 오늘의 게임 1건 (ACTIVE='Y' 최신) → GameDto -->
  <select id="selectTodayGame" resultMap="GameDtoMap">
    SELECT
      g.BAL_ID        AS GAME_ID,
      g.TITLE         AS TITLE,
      TO_CHAR(g.CREATE_DATE,'YYYY-MM-DD') AS START_AT,
      g.ACTIVE        AS IS_ACTIVE
    FROM BAL_GAME g
    WHERE g.ACTIVE = 'Y'
    ORDER BY g.CREATE_DATE DESC
    FETCH FIRST 1 ROWS ONLY
  </select>

  <!-- 특정 게임의 옵션 목록 → OptionDto -->
  <!-- 인터페이스 파라미터명이 gameId 라고 가정(@Param("gameId") 권장) -->
  <select id="selectOptionsByGameId" parameterType="long" resultMap="OptionDtoMap">
    SELECT
      o.OPTION_ID     AS OPTION_ID,
      o.BAL_ID        AS GAME_ID,
      o.LABEL         AS LABEL,
      o.TEXT_CONTENT  AS TEXT_CONTENT
      
    FROM BAL_OPTION o
    WHERE o.BAL_ID = #{gameId}
    ORDER BY o.LABEL
 	</select>
  
	  <!-- 특정 게임의 옵션별 총 투표수 -->
	<select id="selectOptionVoteCounts" parameterType="long" resultType="map">
	   SELECT
	    o.LABEL AS LABEL,
	    COUNT(*) AS CNT
	  FROM BAL_VOTE v
	  JOIN BAL_OPTION o ON v.OPTION_ID = o.OPTION_ID
	  WHERE v.BAL_ID = #{gameId}
	  GROUP BY o.LABEL
	  ORDER BY o.LABEL
	</select>
	
	<!-- 유저가 선택한 옵션 라벨 조회 -->
	<select id="selectUserVoteLabel" resultType="string">
	  SELECT o.LABEL
	  FROM BAL_VOTE v
	  JOIN BAL_OPTION o ON v.OPTION_ID = o.OPTION_ID
	  WHERE v.BAL_ID = #{gameId}
	    AND v.USER_ID = #{userId}
	</select>

	<!-- 유저 MBTI 조회 -->
	<select id="selectUserMbtiCode" parameterType="long" resultType="string">
	  SELECT m.MBTI_NAME
	  FROM USERS u
	  JOIN MBTI m ON u.MBTI_ID = m.MBTI_ID
	  WHERE u.USER_ID = #{userId}
	</select>

	<!-- 옵션별 MBTI 분포 (통계용 Map) -->
	<select id="selectOptionMbti" parameterType="long" resultType="map">
	    SELECT
	      o.LABEL     AS LABEL,
	      v.SNAP_MBTI AS MBTI,
	      COUNT(*)    AS CNT,
	      RATIO_TO_REPORT(COUNT(*)) OVER (PARTITION BY o.LABEL) AS PCT
	    FROM BAL_VOTE v
	    JOIN BAL_OPTION o ON v.OPTION_ID = o.OPTION_ID
	    WHERE v.BAL_ID = #{gameId}
	    GROUP BY o.LABEL, v.SNAP_MBTI
	    ORDER BY o.LABEL, MBTI
	</select>
  
  <!-- 유저가 이미 투표했는지 확인 -->
  <select id="hasUserVoted" resultType="int">
	SELECT COUNT(*)
	FROM BAL_VOTE
	WHERE BAL_ID = #{gameId}
	AND USER_ID = #{userId}
  </select>
  
	  <!-- 투표 등록 -->
	<insert id="insertVote">
	  INSERT INTO BAL_VOTE (VOTE_ID, BAL_ID, OPTION_ID, USER_ID, SNAP_MBTI)
	  VALUES (BAL_VOTE_SEQ.NEXTVAL, #{gameId}, #{optionId}, #{userId}, #{snapMbti})
	</insert>

  

	<!-- 지난 게임 목록 (페이지) → PastCard -->
  <select id="selectPastGamesPaged" resultType="map">
    SELECT
      g.BAL_ID        AS GAME_ID,
      g.TITLE         AS TITLE,
      TO_CHAR(g.CREATE_DATE,'YYYY-MM-DD') AS START_AT
    FROM BAL_GAME g
    WHERE g.ACTIVE = 'N'
       AND  TRUNC(g.CREATE_DATE) &lt; TRUNC(SYSDATE)
    ORDER BY g.CREATE_DATE DESC, g.BAL_ID DESC
    OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
  </select>

	<!-- 지난 게임 총 개수 -->
  <select id="countPastGames" resultType="int">
    SELECT COUNT(*)
    FROM BAL_GAME g
    WHERE g.ACTIVE = 'N'
       OR TRUNC(g.CREATE_DATE) &lt; TRUNC(SYSDATE)
  </select>
  
  <!-- 새로운 게임 활성화 (가장 최신 N → Y) -->
  <update id="activateNewGame">
    UPDATE BAL_GAME
    SET ACTIVE = 'Y'
    WHERE BAL_ID = (
      SELECT MAX(BAL_ID) FROM BAL_GAME WHERE ACTIVE = 'N'
    )
  </update>
  
  
  <!-- 오늘의 게임 비활성화 -->
	<update id="deactivateTodayGame">
	 UPDATE BAL_GAME
  SET ACTIVE = 'N'
  WHERE CREATE_DATE &lt; TRUNC(SYSDATE)
    AND ACTIVE = 'Y'
	</update>
	
	  
	  <!-- BAL_GAME insert -->
<insert id="insertGame" parameterType="string">
  INSERT INTO BAL_GAME (TITLE, CREATE_DATE)
  VALUES (#{title}, SYSDATE)
</insert>



<!-- BAL_OPTION insert -->
<insert id="insertOption">
  INSERT INTO BAL_OPTION (BAL_ID, LABEL, TEXT_CONTENT)
  VALUES (#{gameId}, #{label}, #{textContent})
</insert>

<select id="selectLastGameId" resultType="long">
  SELECT MAX(BAL_ID) FROM BAL_GAME
</select>


  

</mapper>
